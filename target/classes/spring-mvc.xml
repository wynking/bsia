<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">


	<!-- 打开Spring的Annotation支持 <context:annotation-config/>的作用是向Spring容器注册以下四个BeanPostProcessor： 
		AutowiredAnnotationBeanPostProcessor CommonAnnotationBeanPostProcessor PersistenceAnnotationBeanPostProcessor 
		RequiredAnnotationBeanPostProcessor 那么，为什么要注册这四个BeanPostProcessor呢？ 是为了让系统能够识别相应的注解。 
		例如： 1、如果想使用@Autowired注解，那么就必须事先在 Spring 容器中声明 AutowiredAnnotationBeanPostProcessor 
		Bean。 传统声明方式如下： <bean class="org.springframework.beans.factory.annotation. 
		AutowiredAnnotationBeanPostProcessor "/> 2、如果想使用@ Resource 、@ PostConstruct、@ 
		PreDestroy等注解就必须声明CommonAnnotationBeanPostProcessor Bean。 3、如果想使用@PersistenceContext注解，就必须声明PersistenceAnnotationBeanPostProcessor的Bean。 
		4、如果想使用@Required的注解，就必须声明RequiredAnnotationBeanPostProcessor的Bean。 以上这些注解是很常用的，如果按照传统的方式进行配置将会非常繁琐，所以Spring给我们提供了一个简便的方式：<context:annotation-config/>，使用该元素可以自动声明以上注解。 
		注：由于<context:component-scan base-package=”xx.xx”/>也包含了自动注入上述Bean的功能，所以<context:annotation-config/> 
		可以省略。如果两者都进行了配置，则只有前者有效。 注： <context:annotation-config> 是用于激活那些已经在spring容器里注册过的bean（无论是通过xml的方式还是通过package 
		sanning的方式）上面的注解。 <context:component-scan>除了具有<context:annotation-config>的功能之外，<context:component-scan>还可以在指定的package下扫描以及注册javabean 
		。 -->
	<context:annotation-config />

	<!-- <mvc:annotation-driven /> 说明查看 http://blog.csdn.net/jbgtwang/article/details/7359592 -->
	<mvc:annotation-driven />
	<!-- <mvc:default-servlet-handler/> 说明查看 http://www.cnblogs.com/fangqi/archive/2012/10/28/2743108.html -->
	<mvc:default-servlet-handler />

	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="cn.com.pansky.otp5.*.controller" />

	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 开启注解 -->
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->
			</list>
		</property>
	</bean>

	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />

	<!-- 静态资源的访问 -->
	<!-- <mvc:resources location="/od/" mapping="/od/**"/> -->
	<mvc:resources location="/resources/" mapping="/resources/**" />

	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" 
		p:ignoreDefaultModelOnRedirect="true"> <property name="messageConverters"> 
		<list> <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" 
		/> </list> </property> </bean> -->


	<bean id="stringConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<bean id="jsonConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean>
		
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="stringConverter" />
				<ref bean="jsonConverter" />
			</list>
		</property>
	</bean>


	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>

</beans>
